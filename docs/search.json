[
  {
    "objectID": "IDPs.html",
    "href": "IDPs.html",
    "title": "IDPs",
    "section": "",
    "text": "This mini-project analyzes the number of Internally Displaced People (IDPs) in 2020 in countries which had more than 500000 of them. Data is provided by the TidyTuesday library, which compiled the data from multiple UN agencies and the the Internal Displacement Monitoring Centre (IDMC).\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(ggplot2)\ntuesdata &lt;- tidytuesdayR::tt_load('2023-08-22')\npopulation &lt;- tuesdata$population\n\nfilterdata &lt;- population |&gt;\n  filter(idps &gt;= 500000, year == 2020)\n\nggplot(filterdata, aes(x = reorder(coo_name, idps), y = idps)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Number of Internally Displaced People per Country in 2020\",\n       subtitle = \"A comparison of IDPs over 500,000 people per country in 2020\",\n       x = \"Country\", \n       y = \"Number of IDPs\") +\n  theme_gray() + coord_flip()\n\n\n\n\n\n\n\n\nAbove is a graph showing different numbers for IDPs (Internally Displaced Peoples) in 2020 across the countries with the highest numbers and a minimum of 500000 IDPs. We can see many countries which have a big refugee exflux to other countries (such as Syria and Afghanistan) are in the list, but more commonly we can see countries with internal conflicts which are not presently at the scale of a civil war. We can also see countries fighting others, such as in the case for Ukraine and Azerbaijan. Some root causes for IDPs include internal and external war as stated, but also include food shortages, local violence, water shortage, climate change, past wars’ effects, government change, and others. The data set originally includes other information, such as origin countries of refugees, their destination countries, etc.\nSources:\nTidyTuesday Source: https://github.com/rfordatascience/tidytuesday/blob/main/data/2023/2023-08-22/readme.md\nThe Original Source of the Data: The TidyTuesday dataset does not provide specific links to its data sources, but the most precise sources they mention are as following: “Data from UNHCR’s annual statistical activities dating back to 1951. Data from the United Nations Relief and Works Agency for Palestine Refugees in the Near East (UNRWA), specifically for registered Palestine refugees under UNRWA’s mandate. Data from the Internal Displacement Monitoring Centre (IDMC) on people displaced within their country due to conflict or violence.”"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Viz",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uras Uyal",
    "section": "",
    "text": "Welcome to Uras Uyal’s website! Uras is a freshman at Pomona College intending to major in Mathematics and Computer Science, and considering a minor in either Data Science or Physics. He is also interested in Geography, History, and Music as side hobbies."
  },
  {
    "objectID": "SpaceObjects.html",
    "href": "SpaceObjects.html",
    "title": "Objects in Space",
    "section": "",
    "text": "This mini-project analyzes trends in number of objects Russia and China have launched into space since 1957. Data is provided by the TidyTuesday library, which accessed the specific dataset from the United Nations Office for Outer Space Affairs (2024) helped by Our World in Data.\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(ggplot2)\ntuesdata &lt;- tidytuesdayR::tt_load('2024-04-23')\nouter_space_objects &lt;- tuesdata$outer_space_objects\n\n\nouter_space_objects_filtered &lt;- filter(outer_space_objects, Entity == \"China\" | Entity == \"Russia\")\n                                       \nggplot(outer_space_objects_filtered, aes(x = Year, y = num_objects, color = Entity)) +\n  geom_line(size = 1) + \n  geom_point(size = 2) +  \n  labs(title = \"Number of Space Objects Launched by China vs. that of Russia\",\n       subtitle = \"A comparison of space activity since the 1950s\",\n       x = \"Year\", \n       y = \"Number of Space Objects Launched\",\n       color = \"Country\",\n       shape = \"Country\") +\n  theme_gray()\n\n\n\n\n\n\n\n\nAbove is a graph of number of objects sent into space by China vs. Russia from 1957 until 2023. Between the 1960s and 2000s, Russia was quite successful in their space launches, however, through the end of this timeframe, their space launches per year started to decrease. The rise in their space launches coincided with the Cold War, and the decline coincided with the dissolution of the Soviet Union in the early 1990s. We can see that in the 1950s and 1960s, China sent no objects into space but as mass education and technology developed in China, it was gradually be able to send objects into space, taking over the lead from Russia in the mid-2010s. Russia’s rise from the 1960s to the 1980s looks sort of logistical, whereas China’s rise since the 1990s looks more exponential, however, it is too early to decide. The causes of these could be the major reasons behind space launches: militaristic and governmental reasons vs. more commercial oriented government backed reasons in Russia and China’s cases respectively. The data set originally includes other countries and organizations around the world as well.\nSources:\nTidyTuesday source: https://github.com/rfordatascience/tidytuesday/blob/main/data/2024/2024-04-23/readme.md\nData Page: Annual number of objects launched into space”, part of the following publication: Edouard Mathieu and Max Roser (2022) - “Space Exploration and Satellites”. Data adapted from United Nations Office for Outer Space Affairs. Retrieved from https://ourworldindata.org/grapher/yearly-number-of-objects-launched-into-outer-space\nDataset: United Nations Office for Outer Space Affairs (2024) – with major processing by Our World in Data. “Annual number of objects launched into space – UNOOSA” [dataset]. United Nations Office for Outer Space Affairs, “Online Index of Objects Launched into Outer Space” [original data]. Retrieved April 21, 2024 from https://ourworldindata.org/grapher/yearly-number-of-objects-launched-into-outer-space"
  },
  {
    "objectID": "SongsAnalyis.html",
    "href": "SongsAnalyis.html",
    "title": "Songs Text Analysis",
    "section": "",
    "text": "{r}´´´ tuesdata &lt;- tidytuesdayR::tt_load(‘2020-01-21’) tuesdata &lt;- tidytuesdayR::tt_load(2020, week = 4) spotify_songs &lt;- tuesdata$spotify_songs"
  },
  {
    "objectID": "SongsAnalysis.html",
    "href": "SongsAnalysis.html",
    "title": "Songs Text Analysis",
    "section": "",
    "text": "We will be analyzing a data set of Spotify songs up to 2020. The data set source can be found at the very bottom of the page. We will be looking at trends in how many songs there is expected to be in a given album depending on genre, and will be analyzing how song titles changed over the decades. To start, we import our data.\n\n\nShow source code\ntuesdata &lt;- tidytuesdayR::tt_load('2020-01-21')\ntuesdata &lt;- tidytuesdayR::tt_load(2020, week = 4)\nspotify_songs &lt;- tuesdata$spotify_songs\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(dplyr)\n\n\n\nLooking at trends of the expected number of songs per album\nFirst, let’s take a look at the average number of songs per album. A lot of artists put up “singles”; so, in order to remove them, we filter for number of songs over 1 per album. Oftentimes, the most mainstream albums come with 7 to 12 or 13 songs per album. However, the data shows that less number of songs is more common for albums. The most common instance is 2 songs per album, then 3, etc.. This could be caused by smaller artists also being featured on Spotify and them having usually no restriction on a minimum amount of songs per album, or having any concern to release a bunch of songs at one time (they can do this over time). We see that all genres are not too extremely off from each other in songs per album; however, we see noticeable differences. Where EDM has about 2.42 songs per album, rap has 3.15. This may possibly be caused by the more vibrant and less-lyrics based nature of EDM opposed to the lyrics-heavy nature of rap. Lack of lyrics may possibly constitute in having less songs in a given album as it is harder to produce unique music with the element of just electronic music and the absence of words. EDM also tends to have the highest number of covers out of any genre as it is easier to mix-match, partly due to its relative lack of lyrics and technological produce again; where covers are only popular with popular songs, automatically making less-popular songs less covered, meaning less songs per a given album.\n\n\nShow source code\navg_songs_per_album &lt;- spotify_songs |&gt;\n  group_by(playlist_genre, track_album_id) |&gt;\n  summarise(songs_per_album = n()) |&gt;\n  group_by(playlist_genre) |&gt;\n  filter(songs_per_album &gt; 1) |&gt;\n  summarise(avg_songs_per_album = mean(songs_per_album))\nprint(avg_songs_per_album)\n\n\n# A tibble: 6 × 2\n  playlist_genre avg_songs_per_album\n  &lt;chr&gt;                        &lt;dbl&gt;\n1 edm                           2.42\n2 latin                         2.82\n3 pop                           2.76\n4 r&b                           3.09\n5 rap                           3.16\n6 rock                          2.95\n\n\nNow, let’s plot the number of songs per album and their instances detailing genres. What this graph tells us different to the data table above is the quickness in decrease of number of instances as number of songs per album increases. Expectedly, EDM, with the red bars, decreases quite fast compared to other genders as we go more right on the x-axis. Rap has quite a slower decreasing curve. Perhaps another color one might catch is orange, which constitutes to R&B, having quite a close curve to that of rap. If we look at our data table above, we see that R&B has a value that is quite close to rap, which fulfills our expectations.\n\n\nShow source code\nsongs_per_album_per_genre &lt;- spotify_songs |&gt;\n  group_by(playlist_genre, track_album_id) |&gt;\n  summarise(songs_per_album = n()) |&gt;\n  filter(songs_per_album &gt; 1)\n\nggplot(songs_per_album_per_genre, aes(x = songs_per_album, fill = playlist_genre)) +\n  geom_bar(aes(y=..count..), stat = \"count\", position = \"dodge\") +\n  labs(x = \"Number of Songs per Album\", y = \"Number of Instances of Albums\", \n       title = \"Albums by Number of Songs Included\") +\n  scale_x_continuous(limits = c(1.5, 8), breaks = 0:8) +\n  scale_fill_manual(values = c(\"red\",\"green\",\"blue\",\"orange\",\"purple\",\"cyan\"))\n\n\n\n\n\n\n\n\n\n\n\nLooking at trends of song titles’ lengths and genericnesses over time\nNow, let’s look at the length of song titles per genre. Here, we look at both a) the number of words in a song’s title by genre, b) the number of characters in a song’s title by genre. Although values are again close, we can see here that rap has both the lowest amount of words and length in terms of characters, and EDM has the highest. Using previous hypotheses, we can hypothesize that since EDM has less songs per album, the titles are more descriptive, the opposite for rap. Another hypothesis is since rap has a lot of words used in the song, the title should be less discriminating to the content, therefore more general, resulting in a shorter title. Again, these are all hypotethical ideas.\n\n\nShow source code\ntitle_lengths &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name)) |&gt;\n  mutate(word_count = str_count(track_name, \"\\\\w+\"), title_charlength = str_length(str_extract_all(track_name,\"\\\\w+\"))) |&gt; \n  group_by(playlist_genre) |&gt;\n  summarise(avg_word_count = mean(word_count), avg_title_length = mean(unlist(title_charlength)), total_songs = n())\nprint(title_lengths)\n\n\n# A tibble: 6 × 4\n  playlist_genre avg_word_count avg_title_length total_songs\n  &lt;chr&gt;                   &lt;dbl&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 edm                      3.48             29.6        6043\n2 latin                    3.04             25.5        5153\n3 pop                      3.20             26.5        5507\n4 r&b                      3.31             27.0        5431\n5 rap                      2.94             24.3        5743\n6 rock                     3.45             29.4        4951\n\n\nLooking at the number of words in songs over their release year, we can obtain the following graph for songs between 1970 and 2015. If we model with a linear regression line, we can see a stark decrease in word usage over the decades in song titles. A few reasons why this might be are the need for more unique titles as generic titles for songs have already been taken therefore the usage of more unique and concentrated words; the ease of marketing shorter titled songs; the ease of access to songs via web-streaming and industrialization in production processes resulting in the need of less “refined” titles. Either way, according to the data set, the decrease in number of words over the years is evident. From the 4.0 levels in the 1970s, we reach the 3.4 words per title levels in the 2010s. I have omitted pre-1970 and 2015-2020 data due to less data points during those years.\n\n\nShow source code\nsongstemp &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name) & track_name!=\"\") |&gt;\n  mutate(year = as.numeric(substr(track_album_release_date, 1,4)), word_count = str_count(track_name, \"\\\\w+\")) |&gt;\n  filter(!is.na(year) & year&gt;=1970 & year&lt;=2015) |&gt;\n  group_by(year) |&gt;\n  summarise(avg_word_count = mean(word_count), total_songs = n())\n\nggplot(songstemp, aes(x = year, y = avg_word_count)) +\n  geom_point(color = \"red\", size = 3) + \n  geom_line(color = \"red\", size = 1) + \n  geom_smooth(method = \"lm\", color = \"darkblue\") + \n  labs(x = \"Song Release Year\", y = \"Average Word Count in Song Title\",\n       title = \"Average Number Words in Songs vs. their Release Year (1970-2015)\")\n\n\n\n\n\n\n\n\n\nFinally, let’s take a look at a generic type of song titles: the word “the” followed by a singular random word (i.e. the song title is two words: “The __“). A famous song that immediately popped into my mind fitting this rule is”The Unforgiven” by Metallica. Let’s now search for the number of songs that fit this rule. We know from a previous data table that the average number of songs per genre is about 5000-6000. This leaves songs with the exact format of “The” and another word at around 1% over most genres. One genre standing out is Latin, which may be caused by Latin songs frequently having non-English therefore non-“The” titles.\n\n\nShow source code\nthe_songs &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name)) |&gt;\n  mutate(the_anyword = str_detect(tolower(track_name), \"^the\\\\s{1}\\\\w+$\")) |&gt;\n  filter(the_anyword) |&gt;\n  group_by(playlist_genre) |&gt;\n  summarise(the_songs_numberof = n())\nprint(the_songs)\n\n\n# A tibble: 6 × 2\n  playlist_genre the_songs_numberof\n  &lt;chr&gt;                       &lt;int&gt;\n1 edm                            59\n2 latin                          14\n3 pop                            55\n4 r&b                            39\n5 rap                            51\n6 rock                           64\n\n\n\n\nSource Used\nAccess at: https://github.com/rfordatascience/tidytuesday/blob/main/data/2020/2020-01-21/readme.md. The source states that the data comes from Spotify’s API via the spotifyr package. Authors of the package are Charlie Thompson, Josiah Parry, Donal Phipps, and Tom Wolff. Kaylin Pavlik had a recent blogpost using the audio features to explore and classify songs. She used the spotifyr package to collect about 5000 songs from 6 main categories (EDM, Latin, Pop, R&B, Rap, & Rock) in creation of this data set. h/t to Jon Harmon & Neal Grantham."
  },
  {
    "objectID": "SongAnalysis.html",
    "href": "SongAnalysis.html",
    "title": "Songs Text Analysis",
    "section": "",
    "text": "We will be analyzing a data set of Spotify songs up to 2020. The data set source can be found at the very bottom of the page. We will be looking at trends in how many songs there is expected to be in a given album depending on genre, and will be analyzing how song titles changed over the decades. To start, we import our data.\n\n\nShow source code\ntuesdata &lt;- tidytuesdayR::tt_load('2020-01-21')\ntuesdata &lt;- tidytuesdayR::tt_load(2020, week = 4)\nspotify_songs &lt;- tuesdata$spotify_songs\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(dplyr)\n\n\n\nLooking at trends of the expected number of songs per album\nFirst, let’s take a look at the average number of songs per album. A lot of artists put up “singles”; so, in order to remove them, we filter for number of songs over 1 per album. Oftentimes, the most mainstream albums come with 7 to 12 or 13 songs per album. However, the data shows that less number of songs is more common for albums. The most common instance is 2 songs per album, then 3, etc.. This could be caused by smaller artists also being featured on Spotify and them having usually no restriction on a minimum amount of songs per album, or having any concern to release a bunch of songs at one time (they can do this over time). We see that all genres are not too extremely off from each other in songs per album; however, we see noticeable differences. Where EDM has about 2.42 songs per album, rap has 3.15. This may possibly be caused by the more vibrant and less-lyrics based nature of EDM opposed to the lyrics-heavy nature of rap. Lack of lyrics may possibly constitute in having less songs in a given album as it is harder to produce unique music with the element of just electronic music and the absence of words. EDM also tends to have the highest number of covers out of any genre as it is easier to mix-match, partly due to its relative lack of lyrics and technological produce again; where covers are only popular with popular songs, automatically making less-popular songs less covered, meaning less songs per a given album.\n\n\nShow source code\navg_songs_per_album &lt;- spotify_songs |&gt;\n  group_by(playlist_genre, track_album_id) |&gt;\n  summarise(songs_per_album = n()) |&gt;\n  group_by(playlist_genre) |&gt;\n  filter(songs_per_album &gt; 1) |&gt;\n  summarise(avg_songs_per_album = mean(songs_per_album))\nprint(avg_songs_per_album)\n\n\n# A tibble: 6 × 2\n  playlist_genre avg_songs_per_album\n  &lt;chr&gt;                        &lt;dbl&gt;\n1 edm                           2.42\n2 latin                         2.82\n3 pop                           2.76\n4 r&b                           3.09\n5 rap                           3.16\n6 rock                          2.95\n\n\nNow, let’s plot the number of songs per album and their instances detailing genres. What this graph tells us different to the data table above is the quickness in decrease of number of instances as number of songs per album increases. Expectedly, EDM, with the red bars, decreases quite fast compared to other genders as we go more right on the x-axis. Rap has quite a slower decreasing curve. Perhaps another color one might catch is orange, which constitutes to R&B, having quite a close curve to that of rap. If we look at our data table above, we see that R&B has a value that is quite close to rap, which fulfills our expectations.\n\n\nShow source code\nsongs_per_album_per_genre &lt;- spotify_songs |&gt;\n  group_by(playlist_genre, track_album_id) |&gt;\n  summarise(songs_per_album = n()) |&gt;\n  filter(songs_per_album &gt; 1)\n\nggplot(songs_per_album_per_genre, aes(x = songs_per_album, fill = playlist_genre)) +\n  geom_bar(aes(y=..count..), stat = \"count\", position = \"dodge\") +\n  labs(x = \"Number of Songs per Album\", y = \"Number of Instances of Albums\", \n       title = \"Albums by Number of Songs Included\") +\n  scale_x_continuous(limits = c(1.5, 8), breaks = 0:8) +\n  scale_fill_manual(values = c(\"red\",\"green\",\"blue\",\"orange\",\"purple\",\"cyan\"))\n\n\n\n\n\n\n\n\n\n\n\nLooking at trends of song titles’ lengths and genericnesses over time\nNow, let’s look at the length of song titles per genre. Here, we look at both a) the number of words in a song’s title by genre, b) the number of characters in a song’s title by genre. Although values are again close, we can see here that rap has both the lowest amount of words and length in terms of characters, and EDM has the highest. Using previous hypotheses, we can hypothesize that since EDM has less songs per album, the titles are more descriptive, the opposite for rap. Another hypothesis is since rap has a lot of words used in the song, the title should be less discriminating to the content, therefore more general, resulting in a shorter title. Again, these are all hypotethical ideas.\n\n\nShow source code\ntitle_lengths &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name)) |&gt;\n  mutate(word_count = str_count(track_name, \"\\\\w+\"), title_charlength = str_length(str_extract_all(track_name,\"\\\\w+\"))) |&gt; \n  group_by(playlist_genre) |&gt;\n  summarise(avg_word_count = mean(word_count), avg_title_length = mean(unlist(title_charlength)), total_songs = n())\nprint(title_lengths)\n\n\n# A tibble: 6 × 4\n  playlist_genre avg_word_count avg_title_length total_songs\n  &lt;chr&gt;                   &lt;dbl&gt;            &lt;dbl&gt;       &lt;int&gt;\n1 edm                      3.48             29.6        6043\n2 latin                    3.04             25.5        5153\n3 pop                      3.20             26.5        5507\n4 r&b                      3.31             27.0        5431\n5 rap                      2.94             24.3        5743\n6 rock                     3.45             29.4        4951\n\n\nLooking at the number of words in songs over their release year, we can obtain the following graph for songs between 1970 and 2015. If we model with a linear regression line, we can see a stark decrease in word usage over the decades in song titles. A few reasons why this might be are the need for more unique titles as generic titles for songs have already been taken therefore the usage of more unique and concentrated words; the ease of marketing shorter titled songs; the ease of access to songs via web-streaming and industrialization in production processes resulting in the need of less “refined” titles. Either way, according to the data set, the decrease in number of words over the years is evident. From the 4.0 levels in the 1970s, we reach the 3.4 words per title levels in the 2010s. I have omitted pre-1970 and 2015-2020 data due to less data points during those years.\n\n\nShow source code\nsongstemp &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name) & track_name!=\"\") |&gt;\n  mutate(year = as.numeric(substr(track_album_release_date, 1,4)), word_count = str_count(track_name, \"\\\\w+\")) |&gt;\n  filter(!is.na(year) & year&gt;=1970 & year&lt;=2015) |&gt;\n  group_by(year) |&gt;\n  summarise(avg_word_count = mean(word_count), total_songs = n())\n\nggplot(songstemp, aes(x = year, y = avg_word_count)) +\n  geom_point(color = \"red\", size = 3) + \n  geom_line(color = \"red\", size = 1) + \n  geom_smooth(method = \"lm\", color = \"darkblue\") + \n  labs(x = \"Song Release Year\", y = \"Average Word Count in Song Title\",\n       title = \"Average Number Words in Songs vs. their Release Year (1970-2015)\")\n\n\n\n\n\n\n\n\n\nFinally, let’s take a look at a generic type of song titles: the word “the” followed by a singular random word (i.e. the song title is two words: “The __“). A famous song that immediately popped into my mind fitting this rule is”The Unforgiven” by Metallica. Let’s now search for the number of songs that fit this rule. We know from a previous data table that the average number of songs per genre is about 5000-6000. This leaves songs with the exact format of “The” and another word at around 1% over most genres. One genre standing out is Latin, which may be caused by Latin songs frequently having non-English therefore non-“The” titles.\n\n\nShow source code\nthe_songs &lt;- spotify_songs |&gt;\n  filter(!is.na(track_name)) |&gt;\n  mutate(the_anyword = str_detect(tolower(track_name), \"^the\\\\s{1}\\\\w+$\")) |&gt;\n  filter(the_anyword) |&gt;\n  group_by(playlist_genre) |&gt;\n  summarise(the_songs_numberof = n())\nprint(the_songs)\n\n\n# A tibble: 6 × 2\n  playlist_genre the_songs_numberof\n  &lt;chr&gt;                       &lt;int&gt;\n1 edm                            59\n2 latin                          14\n3 pop                            55\n4 r&b                            39\n5 rap                            51\n6 rock                           64\n\n\n\n\nSource Used\nAccess at: https://github.com/rfordatascience/tidytuesday/blob/main/data/2020/2020-01-21/readme.md. The source states that the data comes from Spotify’s API via the spotifyr package. Authors of the package are Charlie Thompson, Josiah Parry, Donal Phipps, and Tom Wolff. Kaylin Pavlik had a recent blogpost using the audio features to explore and classify songs. She used the spotifyr package to collect about 5000 songs from 6 main categories (EDM, Latin, Pop, R&B, Rap, & Rock) in creation of this data set. h/t to Jon Harmon & Neal Grantham."
  }
]